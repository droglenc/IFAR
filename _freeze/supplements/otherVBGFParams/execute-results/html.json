{
  "hash": "c339e42579765a6ffaa7e039aa45043b",
  "result": {
    "markdown": "---\ntitle: \"Other VBGF Parameterizations\"\nauthor: \"Derek H. Ogle\"\noutput: html_document\n---\n\n\n&nbsp;\n\nThe von Bertalanffy Growth Function (VBGF) used in Chapter 12 of @ogleIntroductoryFisheriesAnalyses2016 is from @beverton_dynamics_1957 and is called the \"Typical\" parameterization of the VBGF. The VBGF can be expressed in alternative forms that are called parameterizations.\n\nDifferent parameterizations do not fit the data differently. In other words, all parameterizations of the VBGF have the same number of parameters and will produce the same predicted values and fitted model plots. However, different parameterizations have different parameters that may be of interest to the fisheries scientist for biological reasons or because they have useful statistical properties. For example, the parameterizations of @von_bertalanffy_quantitative_1938 and @mooij_analysis_1999 both use $L_{0}$, which is the mean length at time 0 (i.e., at \"hatch\"). Thus, either of these parameterizations could be used if the $L_{0}$ parameter was of biological interest. In contrast, the parameters in the parameterizations of @schnute_versatile_1981 and @francis_are_1988 are either largely or wholly based on expected values, which are generally less correlated. Thus, if one wants to avoid the problems associated with highly correlated parameters (as discussed in  @ogleIntroductoryFisheriesAnalyses2016) and is not interested in the parameters of the other parameterizations, then either of these two parameterizations may be used.\n\nThe parametarizations of @von_bertalanffy_quantitative_1938 and @francis_are_1988 are fit in this supplement to illustrate fitting other than the \"Typical\" parameterization used in Chapter 12 of @ogleIntroductoryFisheriesAnalyses2016. Fitting growth functions other than the VBGF is demonstrated [here](otherGrowthFuns.html).\n\n# Setup\n## Packages\nFunctions used in this supplement require the following packages.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(FSA)      # for headtail(), vbFuns(), vbStarts()\nlibrary(dplyr)    # for select(), filter()\nlibrary(nlstools) # for nlsBoot()\n```\n:::\n\n\n\n## Data\nThe male [Black Drum data](https://fishr-core-team.github.io/FSAdata/reference/BlackDrum2001.html).^[Download data with CSV link on the linked page.] used in @ogleIntroductoryFisheriesAnalyses2016 are also used in this supplement. As in @ogleIntroductoryFisheriesAnalyses2016 a few unneeded variables are removed for simplicity, only males are examined, and a single old fish is removed by including only fish with an otolith age less than 50.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbdm <- read.csv(\"https://raw.githubusercontent.com/fishR-Core-Team/FSAdata/main/data-raw/BlackDrum2001.csv\") |>\n  select(-c(spname,day,weight)) |>\n  filter(sex==\"male\",otoage<50)\nheadtail(bdm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     year agid month     tl  sex otoage\n#R|  1  2001    1     4  787.5 male      6\n#R|  2  2001    2     5  700.0 male      5\n#R|  3  2001    8     5 1140.0 male     23\n#R|  72 2001  122     5 1175.0 male     39\n#R|  73 2001  125     6  590.0 male      4\n#R|  74 2001  127     6  530.0 male      3\n```\n:::\n:::\n\n\n&nbsp;\n\n# Original Parameterization\n\nThe parameterization originally proposed by @von_bertalanffy_quantitative_1938 is defined as\n\n$$ E[L|t] = L_{\\infty} - (L_{\\infty}-L_{0})e^{-Kt} $$\n\nwhere $L_{\\infty}$ and $K$ are as defined for the typical parameterization and $L_{0}$ is the mean length at $t=0$.\n\nAs demonstrated in @ogleIntroductoryFisheriesAnalyses2016 for the \"Typical\" VBGF, an R function that uses the VBGF to predict length from a given age is needed. This R function may be created by the user, but for many common parameterizations it is easier to use `vbFuns()` from `FSA`. As a reminder, `vbFuns()` requires the name for the parameterization to use in quotes as the first argument.^[A brief explanation of the parameters is also returned if `msg=TRUE` is included.]\n\nAn R function called `vbO()` is created for the \"original\" parameterization below. Note with this function that values for the three parameters may be included as a vector in `Linf=`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( vbO <- vbFuns(\"Original\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  function(t,Linf,K=NULL,L0=NULL) {\n#R|    if (length(Linf)==3) { K <- Linf[[2]]\n#R|                           L0 <- Linf[[3]]\n#R|                           Linf <- Linf[[1]] }\n#R|    Linf-(Linf-L0)*exp(-K*t)\n#R|    }\n#R|  <bytecode: 0x000001f9063746d8>\n#R|  <environment: 0x000001f9064c29f0>\n```\n:::\n:::\n\n\nStarting values are obtained with `vbStarts()` as described in @ogleIntroductoryFisheriesAnalyses2016, but using `type=\"Original\"` for this parameterization.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( svO <- vbStarts(tl~otoage,data=bdm,type=\"Original\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  $Linf\n#R|  [1] 1192.692\n#R|  \n#R|  $K\n#R|  [1] 0.1924053\n#R|  \n#R|  $L0\n#R|  [1] 88.57503\n```\n:::\n:::\n\n\nThe VBGF is fit and parameter estimates with likelihood profile confidence intervals and bootstrapped confidence intervals and predictions may also be obtained as described in @ogleIntroductoryFisheriesAnalyses2016.\n\n\n::: {.cell layout-align=\"center\" hash='otherVBGFParams_cache/html/unnamed-chunk-5_94bcae9b22c06f2a668ddebb5fd715a7'}\n\n```{.r .cell-code}\nnlsO <- nls(tl~vbO(otoage,Linf,K,L0),data=bdm,start=svO)\ncbind(Ests=coef(nlsO),confint(nlsO))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|               Ests         2.5%        97.5%\n#R|  Linf 1196.7192084 1177.9880068 1217.3520912\n#R|  K       0.1418268    0.1214678    0.1649841\n#R|  L0    242.1881977  133.1636548  338.4767317\n```\n:::\n\n```{.r .cell-code}\nbootO <- nlsBoot(nlsO)\ncbind(Ests=coef(nlsO),confint(bootO))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|               Ests      95% LCI      95% UCI\n#R|  Linf 1196.7192084 1178.5421670 1215.8891738\n#R|  K       0.1418268    0.1223639    0.1627932\n#R|  L0    242.1881977  145.0522382  334.5605528\n```\n:::\n\n```{.r .cell-code}\npredict(bootO,vbO,t=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       t   Median  95% LCI 95% UCI\n#R|  [1,] 3 573.2464 537.8995 612.112\n```\n:::\n:::\n\n\n&nbsp;\n\n# Francis Parameterization\n\nThe @francis_are_1988 parameterization is defined as\n\n$$ E[L|t] = L_{1} + (L_{3}-L_{1})\\frac{1-r^{2\\frac{t-t_{1}}{t_{3}-t_{1}}}}{1-r^{2}} $$\n\nwhere \n\n$$ r=\\frac{L_{3}-L_{2}}{L_{2}-L_{1}} $$\n\nThe function parameters are $L_{1}$, $L_{2}$, and $L_{3}$, which represent the mean lengths at ages $t_{1}$, $t_{2}$, and $t_{3}$, respectively, where $t_{1}$ and $t_{3}$ are relatively young and old ages chosen by the user and $t_{2}$ is the average of $t_{1}$ and $t_{3}$.\n\nSimilar to above, an R function called `vbF()` is created for the \"Francis\" parameterization below. Note with this function that values for the three parameters may be included as a vector in `L1=` and that the youngest and oldest ages may be included as a vector in `t1=`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( vbF <- vbFuns(\"Francis\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  function(t,L1,L2=NULL,L3=NULL,t1,t3=NULL) {\n#R|    if (length(L1)==3) { L2 <- L1[[2]]; L3 <- L1[[3]]; L1 <- L1[[1]] }\n#R|    if (length(t1)==2) { t3 <- t1[[2]]; t1 <- t1[[1]] }\n#R|    r <- (L3-L2)/(L2-L1)\n#R|    L1+(L3-L1)*((1-r^(2*((t-t1)/(t3-t1))))/(1-r^2))\n#R|    }\n#R|  <bytecode: 0x000001f90639c710>\n#R|  <environment: 0x000001f9052cacc0>\n```\n:::\n:::\n\n\nAs stated above, the user must choose values for $t_{1}$ and $t_{3}$. In this example, I have chosen to use the youngest and oldest ages in the data (as found with `range()`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( ages <- range(bdm$otoage) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  [1]  3 42\n```\n:::\n:::\n\n\nStarting values are obtained with `vbStarts()` as described above, but with `type=\"Francis\"`. Additionally, with the \"Francis\" parameterization, the ages that define $t_{1}$ and $t_{3}$ must also be provided in `ages2use=`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( svF <- vbStarts(tl~otoage,data=bdm,type=\"Francis\",ages2use=ages) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|  $L1\n#R|  [1] 572.775\n#R|  \n#R|  $L2\n#R|  [1] 1139.625\n#R|  \n#R|  $L3\n#R|  [1] 1205\n```\n:::\n:::\n\n\nThe VBGF is fit and parameter estimates with likelihood profile confidence intervals and bootstrapped confidence intervals and predictions are obtained as described in @ogleIntroductoryFisheriesAnalyses2016, with the exception that the vector that defines the youngest and oldest ages must be supplied to `vbF()`.\n\n\n::: {.cell layout-align=\"center\" hash='otherVBGFParams_cache/html/unnamed-chunk-9_c4d2a375d8dd69c35fa24246ed080230'}\n\n```{.r .cell-code}\nnlsF <- nls(tl~vbF(otoage,L1,L2,L3,t1=ages),data=bdm,start=svF)\ncbind(Ests=coef(nlsF),confint(nlsF))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         Ests      2.5%     97.5%\n#R|  L1  572.975  533.2025  612.3236\n#R|  L2 1157.463 1145.6535 1169.2496\n#R|  L3 1194.248 1176.6756 1212.7376\n```\n:::\n\n```{.r .cell-code}\nbootF <- nlsBoot(nlsF)\ncbind(Ests=coef(nlsF),confint(bootF))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|         Ests   95% LCI   95% UCI\n#R|  L1  572.975  537.1674  609.8586\n#R|  L2 1157.463 1146.1576 1169.1746\n#R|  L3 1194.248 1178.7829 1211.8380\n```\n:::\n\n```{.r .cell-code}\npredict(bootF,vbF,t=3,t1=ages[1],t3=ages[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       t   Median  95% LCI  95% UCI\n#R|  [1,] 3 574.7108 537.1674 609.8586\n```\n:::\n:::\n\n\nNote that the intra-parameter correlations are relatively low for this parameterization. Additionally, the scale of the parameters in the \"Francis\" parameterization are usually similar. Both of these characteristics may aid model convergence.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(nlsF,correlation=TRUE)$correlation\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|             L1         L2        L3\n#R|  L1  1.0000000 -0.1609491 0.1705984\n#R|  L2 -0.1609491  1.0000000 0.6492111\n#R|  L3  0.1705984  0.6492111 1.0000000\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}