---
title: "Other Growth Functions"
author: "Derek H. Ogle"
output: html_document
---

# Background
The von Bertalanffy Growth Function (VBGF) was introduced and methods for fitting the function were illustrated in Chapter 12 of @ogleIntroductoryFisheriesAnalyses2016. Mean length-at-age has been modeled by functions other than the VBGF. Common other functions are the exponential, logistic, and polynomial [@ricker_computation_1975], as well as the specific functions of @gompertz_nature_1825, @richards_flexible_1959, and @schnute_versatile_1981.

Several of these functions are used in this supplement to demonstrate how to fit growth functions other than the VBGF. Other supplements demonstrate how to [fit other parameterizations of the VBGF](otherVBGFParams.html) and [use alternative nonlinear model fitting algorithms](otherNLAlgorithms.html).

# Setup
## Packages
Functions used in this supplement require the following packages. Also note that one function from `AICcmodavg` is used below with `::` so that the whole package does not have to be loaded.

```{r}
#| results: hide
library(FSA)        # for headtail(), vbFuns(), vbStarts()
library(dplyr)      # for select(), filter()
library(nlstools)   # for nlsBoot()
```

```{r}
#| echo: false
knitr::knit_hooks$set(
  par1 = function(before, options, envir) {
    if (before && options$fig.show != "none") {
      par(mar=c(3.05,3.05,0.65,0.65),
          mgp=c(1.9,0.3,0),
          tcl=-0.2,
          las=1,
          cex.lab=0.95,
          cex.axis=0.9)
      if (is.list(options$par))
        do.call(par, options$par)
    }
  }
)
```

## Data
The male [Black Drum data](https://fishr-core-team.github.io/FSAdata/reference/BlackDrum2001.html).^[Download data with CSV link on the linked page.] used in @ogleIntroductoryFisheriesAnalyses2016 are also used in this supplement. As in @ogleIntroductoryFisheriesAnalyses2016 a few unneeded variables are removed for simplicity, only males are examined, and a single old fish is removed by including only fish with an otolith age less than 50.

```{r}
bdm <- read.csv("https://raw.githubusercontent.com/fishR-Core-Team/FSAdata/main/data-raw/BlackDrum2001.csv") |>
  select(-c(spname,day,weight)) |>
  filter(sex=="male",otoage<50)
headtail(bdm)
```

&nbsp;

# Fitting Other Growth Functions

The "Schnute" model and several parameterizations of the logistic, Gompertz, and Richards models have been coded in convenience functions in `FSA`. For example, the default parameterizations of the logistic, Gompertz, and Richards models are defined below.

```{r}
l1 <- logisticFuns()
g1 <- GompertzFuns()
r1 <- RichardsFuns()
```

Unfortunately, convenience functions for finding starting values for each of these functions do not exist. Starting values may be obtained by iteratively superimposing a curve of the function at chosen values for the parameters onto a scatterplot of the raw data. This process may take considerable trial-and-error to find parameter values that provide a curve in the "neighborhood" of the data. Starting values likely only need to provide a rough fit to the data.

The code below demonstrates this process for the Richards function created above in `r1()`. Note that the Richards function has four parameters -- $L_{\infty}$, $k$, $a$, and $b$. Further note that I had considerable difficulty finding starting values that would work with the Richards function for these data.

```{r par1=TRUE}
#| label: fig-RichardsStarts
#| fig-cap: Richards growth function evaluated at potential starting values superimposed on the length-at-age data for male Black Drum.
#| par1: true
plot(tl~otoage,data=bdm,pch=19,col=rgb(0,0,0,1/4),
     xlab="Otolith Age",ylab="Total Length (mm)")
svR1 <- list(Linf=1200,k=0.1,a=1.1,b=0.4)
curve(r1(x,unlist(svR1)),from=3,to=42,add=TRUE,lwd=2)
```

A similar process (not shown) was followed for the logistic and Gompertz models.

```{r}
#| echo: FALSE
#| results: hide
#| fig.show: hide
plot(tl~otoage,data=bdm,pch=19,col=rgb(0,0,0,1/4))
svG1 <- list(Linf=1250,gi=0.15,ti=2)
curve(g1(x,unlist(svG1)),from=3,to=42,add=TRUE,lwd=2)
plot(tl~otoage,data=bdm,pch=19,col=rgb(0,0,0,1/4))
svL1 <- list(Linf=1250,gninf=0.15,ti=4)
curve(l1(x,unlist(svL1)),from=3,to=42,add=TRUE,lwd=2)
```
```{r}
svG1 <- list(Linf=1250,gi=0.15,ti=2)
svL1 <- list(Linf=1250,gninf=0.15,ti=4)
```

These models may be fit and summarized as illustrated in @ogleIntroductoryFisheriesAnalyses2016. The code below is for the Richards function.

```{r}
fitR1 <- nls(tl~r1(otoage,Linf,k,a,b),data=bdm,start=svR1)
bootR1 <- nlsBoot(fitR1)
cbind(Ests=coef(fitR1),confint(bootR1))
predict(bootR1,r1,t=3)
```

Information criterion may be used to identify which of these models best fits the male Black Drum data. First, the von Bertalanffy (as fit in @ogleIntroductoryFisheriesAnalyses2016), Gompertz, and logistic functions are fit to the data.

```{r}
vbTyp <- vbFuns()
svTyp <- list(Linf=1193,K=0.13,t0=-2.0)
fitTyp <- nls(tl~vbTyp(otoage,Linf,K,t0),data=bdm,start=svTyp)
fitG1 <- nls(tl~g1(otoage,Linf,gi,ti),data=bdm,start=svG1)
fitL1 <- nls(tl~l1(otoage,Linf,gninf,ti),data=bdm,start=svL1)
```

These objects are then submitted to `AICctab` to provide a summary table. From this, the Richards models is most supported followed by the VBGF. The logistic and Gompertz models had little support, likely because they force an inflection point in the model which is not apparent in these data.

```{r}
AICcmodavg::aictab(list(fitTyp,fitL1,fitG1,fitR1),
                   c("VBGF","logistic","Gompertz","Richards"))
```

A plot of the best-fit model for each growth function (@fig-OtherGFCompare) shows, however, that there is likely very little difference in predicted values among the four models.

```{r}
#| label: fig-OtherGFCompare
#| fig-cap: Fitted models for the von Bertalanffy (black), Richards (blue), Gompertz (red), and logistic (orange) growth functions fit to the male Black Drum data.
#| par1: true
plot(tl~otoage,data=bdm,pch=19,col=rgb(0,0,0,1/4),
     xlab="Otolith Age",ylab="Total Length (mm)")
curve(vbTyp(x,coef(fitTyp)),from=3,to=42,add=TRUE,lwd=6)
curve(r1(x,coef(fitR1)),from=3,to=42,add=TRUE,lwd=4,col="blue")
curve(g1(x,coef(fitG1)),from=3,to=42,add=TRUE,lwd=2,col="red")
curve(l1(x,coef(fitL1)),from=3,to=42,add=TRUE,col="orange")
```
