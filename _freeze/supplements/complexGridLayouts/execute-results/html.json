{
  "hash": "eee9b4885c610b187ff92ac2e5ea57ed",
  "result": {
    "markdown": "---\ntitle: \"Complex Grid Layouts\"\nauthor: \"Derek H. Ogle\"\noutput: html_document\n---\n\n\n&nbsp;\n\nSeveral methods for modifying base graphics were shown in @ogleIntroductoryFisheriesAnalyses2016, including simple layouts (side-by-side, one-over-the-other) of multiple plots. More complex layouts (e.g., plot in first row spans two columns or unequal sized plots) are described in this supplement. Creating common x- and y-axis labels for a grid of plots is [described in this supplement](commonAxisLabels.html).\n\nA single function is used from `dplyr` in this supplement; thus, `::` is used instead of loading the entire package. The `FSA` package is loaded here to provide access to the modified `hist()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(FSA)\n```\n:::\n\n\nThe `BullTroutRML2` and `BloaterLH` data from `FSAdata` used in @ogleIntroductoryFisheriesAnalyses2016 are also used here.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata(BullTroutRML2,package=\"FSAdata\")\ndata(BloaterLH,package=\"FSAdata\")\n```\n:::\n\n\n# Introducing `layout()`\n`layout()` allows for more complicated organizations of plots. The only required argument to `layout()` is a matrix that specifies the positions, as a grid, for a series of plots. The numbers in the matrix describe which sequential plot will appear in that position. For example, the following code constructs a 2x2 grid for four plots where the first plot will appear in the lower-right corner and the last (fourth) plot will appear in the upper-left corner.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( m <- matrix(4:1,nrow=2,byrow=TRUE) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       [,1] [,2]\n#R|  [1,]    4    3\n#R|  [2,]    2    1\n```\n:::\n\n```{.r .cell-code}\nlayout(m)\n```\n:::\n\n\n`layout.show()` is used to show the layout grid. Its only argument is the number of positions to show. The example below illustrates the layout created above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlayout.show(4)\n```\n\n::: {.cell-output-display}\n![Illustration of 2x2 layout grid for graphics.](complexGridLayouts_files/figure-html/fig-Layout1-1.png){#fig-Layout1 fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\n# More Interesting Layouts\nThe 2x2 grid in @fig-Layout1 is not that interesting because that layout is just as easily constructed with `mfrow=` in `par()` (as shown in @ogleIntroductoryFisheriesAnalyses2016). Layouts, however, can also be constructed that are not \"grids.\"  For example, the entire first row may be one plot with a second row of two plots. This layout grid is constructed by including a \"1\" in the first two positions of the layout matrix (@fig-Layout2).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( m <- matrix(c(1,1,2,3),nrow=2,byrow=TRUE) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       [,1] [,2]\n#R|  [1,]    1    1\n#R|  [2,]    2    3\n```\n:::\n\n```{.r .cell-code}\nlayout(m)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlayout.show(3)\n```\n\n::: {.cell-output-display}\n![Illustration of layout grid for graphics with one plot in the first row and two in the second row.](complexGridLayouts_files/figure-html/fig-Layout2-1.png){#fig-Layout2 fig-align='center' width=384}\n:::\n:::\n\n\nThe following code fills this layout grid to produce @fig-Layout3.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npar(mar=c(3.05,3.05,0.65,0.65),mgp=c(1.9,0.3,0),tcl=-0.2,las=1,\n    cex.lab=0.95,cex.axis=0.9)\nplot(age3~eggs,data=BloaterLH,pch=19,xlab=\"Millions of Eggs\",\n     ylab=\"Relative Abundance of Age-3 Fish\")\nhist(~eggs,data=BloaterLH,xlab=\"Millions of Eggs\")\nhist(~age3,data=BloaterLH,xlab=\"Age-3 Relative Abundance\")\n```\n\n::: {.cell-output-display}\n![Illustration of a plot with one subplot in the first row and two in the second row.](complexGridLayouts_files/figure-html/fig-Layout3-1.png){#fig-Layout3 fig-align='center' width=768}\n:::\n:::\n\n\n&nbsp;\n\nThe size of the plots in the layout may be controlled with `height=` and `width=`. These arguments accept vectors that represent the **relative** heights and widths of the rows and columns in the layout grid, respectively. For example, `height=c(3,1)` sets the height of the first row to be three times larger than the height of the second row. Including the `respect=TRUE` argument will assure that \"unit distances\" in the horizontal and vertical directions are treated the same. An example layout with different cell sizes is constructed below and shown in @fig-Layout4. Also note in this example, that a zero in a cell means that that cell will not receive a plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n( m <- matrix(c(2,0,1,3),nrow=2,byrow=TRUE) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       [,1] [,2]\n#R|  [1,]    2    0\n#R|  [2,]    1    3\n```\n:::\n\n```{.r .cell-code}\nlayout(m,height=c(1,4),width=c(4,1),respect=TRUE)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlayout.show(3)\n```\n\n::: {.cell-output-display}\n![Illustration of layout grid for plots with differing row heights and column widths.](complexGridLayouts_files/figure-html/fig-Layout4-1.png){#fig-Layout4 fig-align='center' width=384}\n:::\n:::\n\n\n@fig-Layout5 is an example that fills the layout shown in @fig-Layout4.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npar(mar=c(4,4,0,0))\nplot(age3~eggs,data=BloaterLH,xlim=c(0,2.4),ylim=c(0,240),pch=19,\n     ylab=\"Relative Abundance of Age-3 Fish\",\n     xlab=\"Millions of Eggs\")\npar(mar=c(0,4,0,0))\nboxplot(BloaterLH$eggs,axes=FALSE,ylim=c(0,2.4),horizontal=TRUE)\npar(mar=c(4,0,0,0))\nboxplot(BloaterLH$age3,axes=FALSE,ylim=c(0,240))\n```\n\n::: {.cell-output-display}\n![Illustration of layout grid with differing heights and widths such that a scatterplot appears in the 'middle' with corresponding boxplots on the 'sides.'](complexGridLayouts_files/figure-html/fig-Layout5-1.png){#fig-Layout5 fig-align='center' width=384}\n:::\n:::\n\n\n&nbsp;\n\n# Final Example\nFinally, `layout()` may be used to make quite complex grids, as illustrated with the code below that produced @fig-Layout6. Note that `plot.new()` creates a new blank plot in which the subsequent `text()` commands will place text (in this case marginal labels).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nBTH1 <- BullTroutRML2 |> dplyr::filter(lake==\"Harrison\",era==\"1977-80\")\nBTO1 <- BullTroutRML2 |> dplyr::filter(lake==\"Osprey\",era==\"1977-80\")\nBTH2 <- BullTroutRML2 |> dplyr::filter(lake==\"Harrison\",era==\"1997-01\")\nBTO2 <- BullTroutRML2 |> dplyr::filter(lake==\"Osprey\",era==\"1997-01\")\n\n( m <- matrix(c(0,1,2,3,5,6,4,7,8),nrow=3,byrow=TRUE) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       [,1] [,2] [,3]\n#R|  [1,]    0    1    2\n#R|  [2,]    3    5    6\n#R|  [3,]    4    7    8\n```\n:::\n\n```{.r .cell-code}\nlayout(m,height=c(1,8,8),width=c(1,8,8),respect=TRUE)\n\npar(mar=c(0,0,0,0))\nplot.new(); text(0.5,0.5,\"Harrison\",cex=1.5)\nplot.new(); text(0.5,0.5,\"Osprey\",cex=1.5)\nplot.new(); text(0.5,0.5,\"Era = 1977-1980\",cex=1.5,srt=90)\nplot.new(); text(0.5,0.5,\"Era = 1997-2001\",cex=1.5,srt=90)\n\npar(mar=c(3.05,3.05,0.65,0.65),mgp=c(1.7,0.5,0))\nxlmt <- c(-0.5,14.5)\nylmt <- c(0,700)\nplot(fl~age,data=BTH1,xlab=\"\",ylab=\"Fork Length\",\n     pch=19,xlim=xlmt,ylim=ylmt)\nplot(fl~age,data=BTO1,xlab=\"\",ylab=\"\",\n     pch=19,xlim=xlmt,ylim=ylmt)\nplot(fl~age,data=BTH2,xlab=\"Age\",ylab=\"Fork Length\",\n     pch=19,xlim=xlmt,ylim=ylmt)\nplot(fl~age,data=BTO2,xlab=\"Age\",ylab=\"\",\n     pch=19,xlim=xlmt,ylim=ylmt)\n```\n\n::: {.cell-output-display}\n![Illustration of layout grid with differing heights and widths such that labels can be placed on the sides.](complexGridLayouts_files/figure-html/fig-Layout6-1.png){#fig-Layout6 fig-align='center' width=768}\n:::\n:::\n",
    "supporting": [
      "complexGridLayouts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}