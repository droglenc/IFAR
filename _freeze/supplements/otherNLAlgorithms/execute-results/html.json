{
  "hash": "09b0e097df280f17555add02424cd194",
  "result": {
    "markdown": "---\ntitle: \"Other Nonlinear Model Fitting Algorithms\"\nauthor: \"Derek H. Ogle\"\noutput: html_document\n---\n\n\n&nbsp;\n\nThe von Bertalanffy Growth Function (VBGF) was introduced and methods for fitting the function were illustrated in Chapter 12 of @ogleIntroductoryFisheriesAnalyses2016. The `nls()` function demonstrated in @ogleIntroductoryFisheriesAnalyses2016 uses the Gauss-Newton algorithm by default. However, there are many other algorithms for fitting nonlinear functions. Two of the several algorithms coded in R are demonstrated in this supplement.\n\n# Setup\n## Packages\nFunctions used in this supplement require the following packages.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(FSA)        # for headtail(), vbFuns(), vbStarts()\nlibrary(dplyr)      # for select(), filter()\nlibrary(nlstools)   # for nlsBoot()\nlibrary(minpack.lm) # for nlsLM()\n```\n:::\n\n\n## Data\nThe male [Black Drum data](https://fishr-core-team.github.io/FSAdata/reference/BlackDrum2001.html).^[Download data with CSV link on the linked page.] used in @ogleIntroductoryFisheriesAnalyses2016 are also used in this supplement. As in @ogleIntroductoryFisheriesAnalyses2016 a few unneeded variables are removed for simplicity, only males are examined, and a single old fish is removed by retaining only fish with an otolith age less than 50.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbdm <- read.csv(\"https://raw.githubusercontent.com/fishR-Core-Team/FSAdata/main/data-raw/BlackDrum2001.csv\") |>\n  select(-c(spname,day,weight)) |>\n  filter(sex==\"male\",otoage<50)\nheadtail(bdm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|     year agid month     tl  sex otoage\n#R|  1  2001    1     4  787.5 male      6\n#R|  2  2001    2     5  700.0 male      5\n#R|  3  2001    8     5 1140.0 male     23\n#R|  72 2001  122     5 1175.0 male     39\n#R|  73 2001  125     6  590.0 male      4\n#R|  74 2001  127     6  530.0 male      3\n```\n:::\n:::\n\n\n&nbsp;\n\n# Levenberg-Marquardt Algorithm\nThe Levenberg-Marquardt (L-M) algorithm is a powerful and common method that switches between two other algorithms depending on when those algorithms perform most optimally [@motulsky_fitting_1987]. Most practically, the L-M algorithm appears to be quite robust to \"poor\" starting values.\n\nThe L-M algorithm is implemented in `nlsLM()` from `minpack.lm` [@elzhov_minpacklm_2013] and uses the same main arguments as `nls()`. For example, the \"Typical\" VBGF is fit (and parameter estimates, bootstrapped confidence intervals, and predictions are extracted) to the male Black Drum data below using the L-M algorithm.^[This code is the same as used in @ogleIntroductoryFisheriesAnalyses2016, except that `nlsLM()` replaced `nls()`.]\n\n\n::: {.cell layout-align=\"center\" hash='otherNLAlgorithms_cache/html/unnamed-chunk-3_724cbed1c20335a300a4a4c04fb9992d'}\n\n```{.r .cell-code}\nvbTyp <- vbFuns()\nsvTyp <- list(Linf=1193,K=0.13,t0=-2.0)\nfitLM <- nlsLM(tl~vbTyp(otoage,Linf,K,t0),data=bdm,start=svTyp)\nbootLM <- nlsBoot(fitLM)\ncbind(Ests=coef(fitLM),confint(bootLM))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|               Ests      95% LCI      95% UCI\n#R|  Linf 1196.7193453 1180.7583403 1215.3277659\n#R|  K       0.1418266    0.1245746    0.1614129\n#R|  t0     -1.5943403   -2.4861941   -0.8246865\n```\n:::\n\n```{.r .cell-code}\npredict(bootLM,vbTyp,t=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|       t   Median  95% LCI  95% UCI\n#R|  [1,] 3 573.6826 534.7676 608.3075\n```\n:::\n:::\n\n\n&nbsp;\n\n# Using Parameter Constraints\nIn some instances, the user may want to constrain the model fitting algorithms to only consider parameter values within a certain range. For example, the user may want to constrain the $L_{\\infty}$ and $K$ parameters of the \"Typical\" VBGF to be positive.\n\n:::{.callout-warning}\nParameter constraints may substantively effect the results of the model fitting. Thus, they should be used rarely and, when used, set liberally.\n:::\n\nParameter constraints can be used with at least two algorithms in R. In either case, the lower and upper bounds for each parameter are entered into separate named **vectors** in the same order as the list used for starting values. Infinite bounds are the default ,but may be specifically defined for some parameters with `Inf` and `-Inf` (where `Inf` represents infinity). For example, vectors that define constraints for the parameters in the \"Typical\" VBGF are defined below, with $L_\\infty$ and $K$ constrained to be positive values and $t_{0}$ left unconstrained.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclwr <- c(Linf=1,  K=0.0001,t0=-Inf)\ncupr <- c(Linf=Inf,K=Inf,   t0=Inf)\n```\n:::\n\n\nThese constraints may be provided to `lower=` and `upper=`, respectively, of `nlsLM()`. In this instance, these bounds had no noticeable effect until bootstapping, where there were fewer instances of lack of convergence.\n\n\n::: {.cell layout-align=\"center\" hash='otherNLAlgorithms_cache/html/unnamed-chunk-5_cfebed35ae9862a03f9566242f788bae'}\n\n```{.r .cell-code}\nfitLM1 <- nlsLM(tl~vbTyp(otoage,Linf,K,t0),data=bdm,start=svTyp,\n                lower=clwr,upper=cupr)\nbootLM1 <- nlsBoot(fitLM1)\ncbind(Ests=coef(fitLM1),confint(bootLM1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|               Ests      95% LCI      95% UCI\n#R|  Linf 1196.7193453 1180.4433085 1214.9203900\n#R|  K       0.1418266    0.1228016    0.1619365\n#R|  t0     -1.5943403   -2.5765079   -0.8162231\n```\n:::\n:::\n\n\nParameter constraints may be used similarly with `nls()`, but the \"Port\" optimization algorithm must be used with `algorithm=\"port\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfitP <- nls(tl~vbTyp(otoage,Linf,K,t0),data=bdm,start=svTyp,\n            algorithm=\"port\",lower=clwr,upper=cupr)\nbootP <- nlsBoot(fitP)\ncbind(Ests=coef(fitP),confint(bootP))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.output}\n#R|               Ests      95% LCI      95% UCI\n#R|  Linf 1196.7188171 1178.3021069 1216.2244935\n#R|  K       0.1418273    0.1230324    0.1629955\n#R|  t0     -1.5943092   -2.5654540   -0.7327735\n```\n:::\n:::\n\n\n&nbsp;\n\n# Other Algorithms\nStill other algorithms are found in `nlxb()` from `nlmrt` [@nash_nlmrt_2014] and `nls2()` from `nls2` [@grothendieck_nls2_2013].\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}